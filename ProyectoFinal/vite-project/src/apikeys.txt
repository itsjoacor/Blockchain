import React, { useState } from "react";
import { Alchemy, Network } from "alchemy-sdk";
import { useNavigate } from "react-router-dom";


const ALCHEMY_API_KEY = "TTecTP8-drgMcfnoeoO6PH1YwI48YWI5";
const MORALIS_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJub25jZSI6IjhkNDg2ZDBmLWRiYTAtNDJlOC1iNGVhLTQ0ZGYxZjc3NmVmNSIsIm9yZ0lkIjoiNDUwODI3IiwidXNlcklkIjoiNDYzODY1IiwidHlwZUlkIjoiZmRkNjU3OWQtN2MyNi00Yzk3LWI5M2YtZWQ0NDVhNmFmODhkIiwidHlwZSI6IlBST0pFQ1QiLCJpYXQiOjE3NDg5OTQyOTQsImV4cCI6NDkwNDc1NDI5NH0.1zcyJ8YwLhbDKRMwKa7DhEPgbKQxGu53RqBqNocPIcU"; // ← reemplazá por la tuya
const CONTRACT_ADDRESS = "0x1FEe62d24daA9fc0a18341B582937bE1D837F91d".toLowerCase();
const FECHA_CORTE = new Date("2025-05-28T00:00:00Z");
const NULL_ADDRESS = "0x0000000000000000000000000000000000000000";

// Alchemy SDK config
const alchemy = new Alchemy({
  apiKey: ALCHEMY_API_KEY,
  network: Network.ETH_SEPOLIA,
});

// 🧠 Fallback Moralis → Alchemy para detectar dirección de minteo
const obtenerMinteoConFallback = async (contract, tokenId, wallet) => {
  const tokenIdDecimal =
    typeof tokenId === "string" && tokenId.startsWith("0x")
      ? parseInt(tokenId, 16).toString()
      : parseInt(tokenId).toString();

  const moralisUrl = `https://deep-index.moralis.io/api/v2/nft/${contract}/${tokenIdDecimal}/transfers?chain=sepolia&format=decimal&limit=100`;

  try {
    const res = await fetch(moralisUrl, {
      headers: { "X-API-Key": MORALIS_API_KEY },
    });

    const data = await res.json();
    const eventos = data.result || [];

    if (eventos.length > 0) {
      const e = eventos[0];
      return {
        from: e.from_address || "Desconocida",
        to: e.to_address || "Desconocido",
        fuente: "moralis",
      };
    }
  } catch (err) {
    console.warn("⚠️ Moralis falló, intento con Alchemy...");
  }

  try {
    const alchemyResult = await alchemy.nft.getNftTransfersForNft(contract, tokenId);
    const primer = alchemyResult.transfers?.[0];

    return {
      from: primer?.from || "Desconocida",
      to: primer?.to || "Desconocido",
      fuente: "alchemy",
    };
  } catch (err) {
    console.error("❌ Alchemy también falló:", err);
  }

  return {
    from: "Desconocida",
    to: "Desconocido",
    fuente: "ninguna",
  };
};

export default function Validacion() {
  const [wallet, setWallet] = useState(null);
  const [nfts, setNfts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [resultado, setResultado] = useState(null);
  const [reglas, setReglas] = useState([]);
  const navigate = useNavigate();
  

 



const connectWallet = async () => {
  if (!window.ethereum) return alert("Instalá MetaMask");
  try {
    const accounts = await window.ethereum.request({
      method: "eth_requestAccounts",
    });
    setWallet(accounts[0]);
  } catch (err) {
    console.error("Error conectando wallet:", err);
  }
};

const fetchNFTsFromAlchemy = async () => {
  if (!wallet) return alert("Conectá la wallet primero");

  setLoading(true);
  setResultado(null);
  setReglas([]);
  setNfts([]);

  try {
    const data = await alchemy.nft.getNftsForOwner(wallet, {
      contractAddresses: [CONTRACT_ADDRESS],
      withMetadata: true,
    });

    const enriquecidos = await Promise.all(
      data.ownedNfts.map(async (nft) => {
        const id = parseInt(nft.tokenId, 16);
        const metadata = nft.rawMetadata || {};
        const tema = metadata.name || `NFT ${id}`;
        const fecha = new Date(metadata.createdAt || "2025-05-20");

        const { from, to } = await obtenerMinteoConFallback(
          CONTRACT_ADDRESS,
          nft.tokenId,
          wallet
        );

        return {
          id,
          tema,
          fecha,
          direccionDeMinteo: from,
          esMinteadoDirectamente:
            from.toLowerCase() === NULL_ADDRESS &&
            to.toLowerCase() === wallet.toLowerCase(),
        };
      })
    );

    setNfts(enriquecidos);
  } catch (err) {
    console.error("❌ Error al obtener NFTs o historial:", err);
  } finally {
    setLoading(false);
  }
};

const validarNFTs = async () => {
  if (!wallet || nfts.length === 0) return;

  const cantidadOk = nfts.length === 10;
  const fechasOk = nfts.every((n) => n.fecha < FECHA_CORTE);
  const mintOk = nfts.every((n) => n.esMinteadoDirectamente);

  setReglas([
    { regla: "Debe haber exactamente 10 NFTs", ok: cantidadOk },
    { regla: "Todos deben estar emitidos antes del 28/05/2025", ok: fechasOk },
    {
      regla: "Todos deben haber sido minteados directamente hacia tu wallet",
      ok: mintOk,
    },
  ]);

  if (cantidadOk && fechasOk && mintOk) {
    setResultado("✅ Validación exitosa. Podés continuar al minteo.");
  } else {
    setResultado("❌ Error: no cumplís con los requisitos.");
  }
};

return (
  <div className="min-h-screen bg-gray-900 text-white p-6 overflow-y-auto">
    <h1 className="text-3xl font-bold mb-6">🧪 Validación con Alchemy + Moralis</h1>

    {!wallet ? (
      <button
        onClick={connectWallet}
        className="bg-green-600 text-white px-4 py-2 rounded shadow"
      >
        🔌 Conectar Wallet
      </button>
    ) : (
      <>
        <p className="mb-4 text-sm text-gray-300">Wallet conectada: {wallet}</p>

        <button
          onClick={fetchNFTsFromAlchemy}
          className="bg-blue-600 text-white px-4 py-2 rounded shadow"
        >
          📄 Obtener NFTs
        </button>

        {loading && (
          <p className="mt-4 animate-pulse text-blue-300">
            ⏳ Cargando NFTs y transferencias...
          </p>
        )}

        {nfts.length > 0 && (
          <>
            <h2 className="mt-6 text-xl font-semibold">🎯 NFTs encontrados:</h2>
            <ul className="mt-2 space-y-2 text-sm text-gray-200">
              {nfts.map((nft) => (
                <li key={nft.id} className="border-b border-gray-700 pb-2">
                  <p>
                    <strong>ID:</strong> {nft.id} — <strong>Tema:</strong> {nft.tema}
                  </p>
                  <p>
                    📅 Fecha: {nft.fecha.toLocaleDateString()} <br />
                    🧾 Minteado desde:{" "}
                    <span
                      className={
                        nft.direccionDeMinteo.toLowerCase() === NULL_ADDRESS
                          ? "text-green-400"
                          : "text-red-400"
                      }
                    >
                      {nft.direccionDeMinteo}
                    </span>
                  </p>
                </li>
              ))}
            </ul>

            <button
              onClick={validarNFTs}
              className="mt-6 bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded shadow"
            >
              ✅ Validar NFTs
            </button>
          </>
        )}

        {reglas.length > 0 && (
          <div className="mt-6 space-y-2">
            <h2 className="text-lg font-semibold">📋 Reglas aplicadas:</h2>
            <ul className="text-sm space-y-1 text-gray-200">
              {reglas.map((r, idx) => (
                <li key={idx}>
                  {r.ok ? "✅" : "❌"} {r.regla}
                </li>
              ))}
            </ul>
          </div>
        )}

        {resultado && (
          <div className="mt-6 text-center">
            <p className="text-lg font-bold mb-4">{resultado}</p>
            <button
              onClick={() => navigate("/mint")}
              disabled={resultado.startsWith("❌")}
              className={`px-6 py-3 rounded font-semibold shadow ${resultado.startsWith("✅")
                ? "bg-green-600 hover:bg-green-700 text-white"
                : "bg-gray-600 text-white cursor-not-allowed"
                }`}
            >
              {resultado.startsWith("✅") ? "Continuar" : "Validación incompleta"}
            </button>

          </div>
        )}
      </>
    )}
  </div>
);
}





[
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "titulo",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "descripcion",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "nombre",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "fecha",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "imageUrl",
				"type": "string"
			}
		],
		"name": "mintConMetadata",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "TransferSingle",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "balances",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "currentTokenId",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getMetadata",
		"outputs": [
			{
				"internalType": "string",
				"name": "titulo",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "descripcion",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "nombre",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "fecha",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "imageUrl",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "metadatas",
		"outputs": [
			{
				"internalType": "string",
				"name": "titulo",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "descripcion",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "nombre",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "fecha",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "imageUrl",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]
60806040525f8055348015610012575f80fd5b503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611351806100605f395ff3fe608060405234801561000f575f80fd5b5060043610610079575f3560e01c8063a574cea411610059578063a574cea4146100e9578063ab7c1eea1461011d578063cbf1304d14610139578063e73496cd1461016957610079565b80629a9b7b1461007d578062fdd58e1461009b5780638da5cb5b146100cb575b5f80fd5b61008561019d565b6040516100929190610a72565b60405180910390f35b6100b560048036038101906100b09190610b20565b6101a2565b6040516100c29190610a72565b60405180910390f35b6100d36101f8565b6040516100e09190610b6d565b60405180910390f35b61010360048036038101906100fe9190610b86565b61021d565b604051610114959493929190610c3b565b60405180910390f35b61013760048036038101906101329190610ddb565b61053f565b005b610153600480360381019061014e9190610b20565b61076a565b6040516101609190610a72565b60405180910390f35b610183600480360381019061017e9190610b86565b61078a565b604051610194959493929190610c3b565b60405180910390f35b5f5481565b5f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2054905092915050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60608060608060605f60025f8881526020019081526020015f206040518060a00160405290815f8201805461025190610f1d565b80601f016020809104026020016040519081016040528092919081815260200182805461027d90610f1d565b80156102c85780601f1061029f576101008083540402835291602001916102c8565b820191905f5260205f20905b8154815290600101906020018083116102ab57829003601f168201915b505050505081526020016001820180546102e190610f1d565b80601f016020809104026020016040519081016040528092919081815260200182805461030d90610f1d565b80156103585780601f1061032f57610100808354040283529160200191610358565b820191905f5260205f20905b81548152906001019060200180831161033b57829003601f168201915b5050505050815260200160028201805461037190610f1d565b80601f016020809104026020016040519081016040528092919081815260200182805461039d90610f1d565b80156103e85780601f106103bf576101008083540402835291602001916103e8565b820191905f5260205f20905b8154815290600101906020018083116103cb57829003601f168201915b5050505050815260200160038201805461040190610f1d565b80601f016020809104026020016040519081016040528092919081815260200182805461042d90610f1d565b80156104785780601f1061044f57610100808354040283529160200191610478565b820191905f5260205f20905b81548152906001019060200180831161045b57829003601f168201915b5050505050815260200160048201805461049190610f1d565b80601f01602080910402602001604051908101604052809291908181526020018280546104bd90610f1d565b80156105085780601f106104df57610100808354040283529160200191610508565b820191905f5260205f20905b8154815290600101906020018083116104eb57829003601f168201915b5050505050815250509050805f01518160200151826040015183606001518460800151955095509550955095505091939590929450565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c590610fbd565b60405180910390fd5b5f80549050600160035f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055506040518060a001604052808781526020018681526020018581526020018481526020018381525060025f8381526020019081526020015f205f820151815f0190816106709190611178565b5060208201518160010190816106869190611178565b50604082015181600201908161069c9190611178565b5060608201518160030190816106b29190611178565b5060808201518160040190816106c89190611178565b509050508673ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62846001604051610743929190611280565b60405180910390a45f8081548092919061075c906112d4565b919050555050505050505050565b6003602052815f5260405f20602052805f5260405f205f91509150505481565b6002602052805f5260405f205f91509050805f0180546107a990610f1d565b80601f01602080910402602001604051908101604052809291908181526020018280546107d590610f1d565b80156108205780601f106107f757610100808354040283529160200191610820565b820191905f5260205f20905b81548152906001019060200180831161080357829003601f168201915b50505050509080600101805461083590610f1d565b80601f016020809104026020016040519081016040528092919081815260200182805461086190610f1d565b80156108ac5780601f10610883576101008083540402835291602001916108ac565b820191905f5260205f20905b81548152906001019060200180831161088f57829003601f168201915b5050505050908060020180546108c190610f1d565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed90610f1d565b80156109385780601f1061090f57610100808354040283529160200191610938565b820191905f5260205f20905b81548152906001019060200180831161091b57829003601f168201915b50505050509080600301805461094d90610f1d565b80601f016020809104026020016040519081016040528092919081815260200182805461097990610f1d565b80156109c45780601f1061099b576101008083540402835291602001916109c4565b820191905f5260205f20905b8154815290600101906020018083116109a757829003601f168201915b5050505050908060040180546109d990610f1d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0590610f1d565b8015610a505780601f10610a2757610100808354040283529160200191610a50565b820191905f5260205f20905b815481529060010190602001808311610a3357829003601f168201915b5050505050905085565b5f819050919050565b610a6c81610a5a565b82525050565b5f602082019050610a855f830184610a63565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ac582610a9c565b9050919050565b610ad581610abb565b8114610adf575f80fd5b50565b5f81359050610af081610acc565b92915050565b610aff81610a5a565b8114610b09575f80fd5b50565b5f81359050610b1a81610af6565b92915050565b5f8060408385031215610b3657610b35610a94565b5b5f610b4385828601610ae2565b9250506020610b5485828601610b0c565b9150509250929050565b610b6781610abb565b82525050565b5f602082019050610b805f830184610b5e565b92915050565b5f60208284031215610b9b57610b9a610a94565b5b5f610ba884828501610b0c565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610be8578082015181840152602081019050610bcd565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610c0d82610bb1565b610c178185610bbb565b9350610c27818560208601610bcb565b610c3081610bf3565b840191505092915050565b5f60a0820190508181035f830152610c538188610c03565b90508181036020830152610c678187610c03565b90508181036040830152610c7b8186610c03565b90508181036060830152610c8f8185610c03565b90508181036080830152610ca38184610c03565b90509695505050505050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ced82610bf3565b810181811067ffffffffffffffff82111715610d0c57610d0b610cb7565b5b80604052505050565b5f610d1e610a8b565b9050610d2a8282610ce4565b919050565b5f67ffffffffffffffff821115610d4957610d48610cb7565b5b610d5282610bf3565b9050602081019050919050565b828183375f83830152505050565b5f610d7f610d7a84610d2f565b610d15565b905082815260208101848484011115610d9b57610d9a610cb3565b5b610da6848285610d5f565b509392505050565b5f82601f830112610dc257610dc1610caf565b5b8135610dd2848260208601610d6d565b91505092915050565b5f805f805f8060c08789031215610df557610df4610a94565b5b5f610e0289828a01610ae2565b965050602087013567ffffffffffffffff811115610e2357610e22610a98565b5b610e2f89828a01610dae565b955050604087013567ffffffffffffffff811115610e5057610e4f610a98565b5b610e5c89828a01610dae565b945050606087013567ffffffffffffffff811115610e7d57610e7c610a98565b5b610e8989828a01610dae565b935050608087013567ffffffffffffffff811115610eaa57610ea9610a98565b5b610eb689828a01610dae565b92505060a087013567ffffffffffffffff811115610ed757610ed6610a98565b5b610ee389828a01610dae565b9150509295509295509295565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f3457607f821691505b602082108103610f4757610f46610ef0565b5b50919050565b7f536f6c6f20656c206f776e657220707565646520656a656375746172206573745f8201527f612066756e63696f6e0000000000000000000000000000000000000000000000602082015250565b5f610fa7602983610bbb565b9150610fb282610f4d565b604082019050919050565b5f6020820190508181035f830152610fd481610f9b565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026110377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ffc565b6110418683610ffc565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61107c61107761107284610a5a565b611059565b610a5a565b9050919050565b5f819050919050565b61109583611062565b6110a96110a182611083565b848454611008565b825550505050565b5f90565b6110bd6110b1565b6110c881848461108c565b505050565b5b818110156110eb576110e05f826110b5565b6001810190506110ce565b5050565b601f8211156111305761110181610fdb565b61110a84610fed565b81016020851015611119578190505b61112d61112585610fed565b8301826110cd565b50505b505050565b5f82821c905092915050565b5f6111505f1984600802611135565b1980831691505092915050565b5f6111688383611141565b9150826002028217905092915050565b61118182610bb1565b67ffffffffffffffff81111561119a57611199610cb7565b5b6111a48254610f1d565b6111af8282856110ef565b5f60209050601f8311600181146111e0575f84156111ce578287015190505b6111d8858261115d565b86555061123f565b601f1984166111ee86610fdb565b5f5b82811015611215578489015182556001820191506020850194506020810190506111f0565b86831015611232578489015161122e601f891682611141565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b5f61126a61126561126084611247565b611059565b610a5a565b9050919050565b61127a81611250565b82525050565b5f6040820190506112935f830185610a63565b6112a06020830184611271565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6112de82610a5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113105761130f6112a7565b5b60018201905091905056fea2646970667358221220491a1cad30c5d86163834029f8da1dc4abc02024e664f3969a011498c036ff9a64736f6c63430008140033

[
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "titulo",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "descripcion",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "nombre",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "fecha",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "imageUrl",
				"type": "string"
			}
		],
		"name": "mintConMetadata",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "TransferSingle",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "balances",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "currentTokenId",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getMetadata",
		"outputs": [
			{
				"internalType": "string",
				"name": "titulo",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "descripcion",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "nombre",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "fecha",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "imageUrl",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "metadatas",
		"outputs": [
			{
				"internalType": "string",
				"name": "titulo",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "descripcion",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "nombre",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "fecha",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "imageUrl",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]